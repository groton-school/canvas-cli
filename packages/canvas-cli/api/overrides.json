{
  "tsReferences": [
    {
      "type": "Account",
      "filePath": "Resources/Accounts.ts"
    },
    {
      "type": "CoursePace",
      "filePath": "Resources/CoursePace.ts"
    },
    {
      "type": "OutcomeResult",
      "filePath": "Resources/OutcomeResults.ts"
    },
    {
      "type": "File",
      "filePath": "Resources/Files.ts"
    },
    {
      "type": "Result",
      "filePath": "Resources/Results.ts"
    },
    {
      "type": "RubricRating",
      "filePath": "Resources/Rubrics.ts"
    },
    {
      "type": "Submission",
      "filePath": "Resources/Submissions.ts"
    },
    {
      "type": "resultUrlStringTheurltotheresultthatwascreated",
      "filePath": "Overrides.ts"
    }
  ],
  "tsTypes": {
    "Positive Integer": {
      "type": "number"
    },
    "Integer": {
      "type": "number"
    },
    "[Integer]": {
      "type": "number[]"
    },
    "DateTime": {
      "type": "string",
      "description": "format: date-time"
    },
    "datetime": {
      "type": "string",
      "description": "format: date-time"
    },
    "Date": {
      "type": "string",
      "description": "format: date"
    },
    "object": {
      "type": "JSONObject",
      "tsReference": {
        "type": "JSONObject",
        "packagePath": "@battis/typescript-tricks"
      }
    },
    "Object": {
      "type": "JSONObject",
      "tsReference": {
        "type": "JSONObject",
        "packagePath": "@battis/typescript-tricks"
      }
    },
    "URL": {
      "type": "string",
      "description": "format: url"
    },
    "Array": {
      "type": "string[]"
    },
    "String[]": {
      "type": "string[]"
    },
    "Hash": {
      "type": "JSONObject",
      "tsReference": {
        "type": "JSONObject",
        "packagePath": "@battis/typescript-tricks"
      }
    },
    "json": {
      "type": "JSONObject",
      "tsReference": {
        "type": "JSONObject",
        "packagePath": "@battis/typescript-tricks"
      }
    },
    "{ \"count\": \"integer\" }": {
      "type": "{ count: number }",
      "description": "format: integer"
    },
    "{success: true}": {
      "type": "{ success: true }"
    },
    "list of content items": {
      "type": "{type: string, property: string, title?: string, count?: number, sub_items_url?: string}[]"
    },
    "array of outcome ids": {
      "type": "string[]"
    },
    "a CSV file in the format that can be imported": {
      "type": "string"
    }
  },
  "operations": {
    "upload_file": {
      "tsImports": [
        {
          "type": "UploadResponse",
          "filePath": "FileUploads.ts"
        }
      ],
      "tsType": {
        "type": "UploadResponse",
        "tsReference": {
          "type": "UploadResponse",
          "filePath": "FileUploads.ts"
        }
      },
      "tsFormParameters": [
        {
          "tsName": "name",
          "description": "The filename of the file. Any UTF-8 name is allowed. Path components such as `/` and `\\` will be treated as part of the filename, not a path to a sub-folder.",
          "tsType": { "type": "string" }
        },
        {
          "tsName": "size",
          "description": "The size of the file, in bytes. This field is recommended, as it will let you find out if there's a quota issue before uploading the raw file.",
          "tsType": { "type": "number", "description": "format: integer" },
          "tsOptional": "?"
        },
        {
          "tsName": "content_type",
          "description": "The content type of the file. If not given, it will be guessed based on the file extension.",
          "tsType": { "type": "string", "description": "format: mime-type" },
          "tsOptional": "?"
        },
        {
          "tsName": "parent_folder_id",
          "description": "The id of the folder to store the file in. An error will be returned if this does not correspond to an existing folder. If this and parent_folder_path are sent an error will be returned. If neither is given, a default folder will be used.",
          "tsType": { "type": "number", "description": "format: int64" },
          "tsOptional": "?"
        },
        {
          "tsName": "parent_folder_path",
          "description": "The path of the folder to store the file in. The path separator is the forward slash `/`, never a back slash. The folder will be created if it does not already exist. This parameter only applies to file uploads in a context that has folders, such as a user, a course, or a group. If this and parent_folder_id are sent an error will be returned. If neither is given, a default folder will be used.",
          "tsType": { "type": "string" },
          "tsOptional": "?"
        },
        {
          "tsName": "folder",
          "description": "The path of the folder to store the file in. The path separator is the forward slash `/`, never a back slash. The folder will be created if it does not already exist. This parameter only applies to file uploads in a context that has folders, such as a user, a course, or a group. If this and parent_folder_id are sent an error will be returned. If neither is given, a default folder will be used.",
          "tsType": { "type": "string" },
          "tsDeprecation": "@deprecated Use parent_folder_path instead.",
          "tsOptional": "?"
        },
        {
          "tsName": "on_duplicate",
          "description": "How to handle duplicate filenames. If `overwrite`, then this file upload will overwrite any other file in the folder with the same name. If `rename`, then this file will be renamed if another file in the folder exists with the given name. If no parameter is given, the default is `overwrite`. This doesn't apply to file uploads in a context that doesn't have folders.",
          "tsType": { "type": "'overwrite'|'rename'" },
          "tsOptional": "?"
        },
        {
          "tsName": "success_include",
          "description": "An array of additional information to include in the upload success response. See Files API for more information.",
          "tsType": { "type": "string[]" },
          "tsOptional": "?"
        }
      ]
    },
    "upload_file_courses": {
      "tsImports": [
        {
          "type": "UploadResponse",
          "filePath": "FileUploads.ts"
        }
      ],
      "tsType": {
        "type": "UploadResponse",
        "tsReference": {
          "type": "UploadResponse",
          "filePath": "FileUploads.ts"
        }
      },
      "tsFormParameters": [
        {
          "tsName": "name",
          "description": "The filename of the file. Any UTF-8 name is allowed. Path components such as `/` and `\\` will be treated as part of the filename, not a path to a sub-folder.",
          "tsType": { "type": "string" }
        },
        {
          "tsName": "size",
          "description": "The size of the file, in bytes. This field is recommended, as it will let you find out if there's a quota issue before uploading the raw file.",
          "tsType": { "type": "number", "description": "format: integer" },
          "tsOptional": "?"
        },
        {
          "tsName": "content_type",
          "description": "The content type of the file. If not given, it will be guessed based on the file extension.",
          "tsType": { "type": "string", "description": "format: mime-type" },
          "tsOptional": "?"
        },
        {
          "tsName": "parent_folder_id",
          "description": "The id of the folder to store the file in. An error will be returned if this does not correspond to an existing folder. If this and parent_folder_path are sent an error will be returned. If neither is given, a default folder will be used.",
          "tsType": { "type": "number", "description": "format: int64" },
          "tsOptional": "?"
        },
        {
          "tsName": "parent_folder_path",
          "description": "The path of the folder to store the file in. The path separator is the forward slash `/`, never a back slash. The folder will be created if it does not already exist. This parameter only applies to file uploads in a context that has folders, such as a user, a course, or a group. If this and parent_folder_id are sent an error will be returned. If neither is given, a default folder will be used.",
          "tsType": { "type": "string" },
          "tsOptional": "?"
        },
        {
          "tsName": "folder",
          "description": "The path of the folder to store the file in. The path separator is the forward slash `/`, never a back slash. The folder will be created if it does not already exist. This parameter only applies to file uploads in a context that has folders, such as a user, a course, or a group. If this and parent_folder_id are sent an error will be returned. If neither is given, a default folder will be used.",
          "tsType": { "type": "string" },
          "tsDeprecation": "@deprecated Use parent_folder_path instead.",
          "tsOptional": "?"
        },
        {
          "tsName": "on_duplicate",
          "description": "How to handle duplicate filenames. If `overwrite`, then this file upload will overwrite any other file in the folder with the same name. If `rename`, then this file will be renamed if another file in the folder exists with the given name. If no parameter is given, the default is `overwrite`. This doesn't apply to file uploads in a context that doesn't have folders.",
          "tsType": { "type": "'overwrite'|'rename'" },
          "tsOptional": "?"
        },
        {
          "tsName": "success_include",
          "description": "An array of additional information to include in the upload success response. See Files API for more information.",
          "tsType": { "type": "string[]" },
          "tsOptional": "?"
        }
      ]
    }
  }
}
