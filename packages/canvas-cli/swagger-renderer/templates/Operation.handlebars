import { Masquerade } from '@groton/canvas-cli.client.base';
{{#tsImports}}
import { {{type}} } from '{{{packagePath}}}{{{filePath}}}';
{{/tsImports}}

{{#if tsPathParameters}}
export type {{tsName}}PathParameters = {
    {{#tsPathParameters}}
    /**
     * {{description}}
     *
     * {{{tsType.description}}}
     *
     * {{tsDeprecation}}
     */
    {{{tsName}}}{{tsOptional}}: {{{tsType.type}}}
    {{/tsPathParameters}}
}
{{/if}}


export type {{tsName}}SearchParameters = Masquerade
{{#if tsPaginated}} & Paginated{{/if}}
{{#if tsQueryParameters}} & Partial<{
    {{#tsQueryParameters}}
    /**
     * {{description}}
     *
     * {{{tsType.description}}}
     *
     * {{tsDeprecation}}
     */
    {{{tsName}}}{{tsOptional}}: {{{tsType.type}}}
    {{/tsQueryParameters}}
}>{{/if}}


{{#if tsFormParameters}}
export type {{tsName}}FormParameters = Masquerade & {
    {{#tsFormParameters}}
    /**
     * {{description}}
     *
     * {{{tsType.description}}}
     *
     * {{tsDeprecation}}
     */
    {{{tsName}}}{{tsOptional}}: {{{tsType.type}}}
    {{/tsFormParameters}}
}{{/if}}

{{!-- tsBodyParameters are not currently used in the Canvas API spec --}}

type Options = {{#if tsPathParameters}}{
  pathParams: {{tsName}}PathParameters;
  } & {{/if}}({
    searchParams?: Partial<{{tsName}}SearchParameters>;
    {{#if tsFormParameters}}   
      params?: Partial<{{tsName}}FormParameters>;
    {{/if}}
    strict?: false;
  } | {
    searchParams: {{tsName}}SearchParameters;
    {{#if tsFormParameters}}
      params: {{tsName}}FormParameters;
    {{/if}}
    strict: true;
  }){{#if tsUpload}} & {
    file: FileLocation
  }{{/if}};

/**
 * {{summary}}
 *
 * {{{notes}}}
 *
 * nickname: {{nickname}}
 *
 * {{tsDeprecation}}
 *
 * {{description}}
 */
export async function {{tsName}}({{#if tsUpload}}{file, ...options}{{else}}options{{/if}}: Options) {
  const response = await client().fetchAs<{{{tsType.type}}}>(`{{{tsEndpoint}}}`, {
      method: "{{method}}", ...options
    });
  {{#if tsUpload}}
    return await client().upload<File>({response, file});
  {{else}}
    return response;
  {{/if}}
}
