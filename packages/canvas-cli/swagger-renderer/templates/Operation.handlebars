{{#tsImports}}
import { {{type}} } from '{{{packagePath}}}{{{filePath}}}';
{{/tsImports}}

{{#if tsPathParameters}}
export type {{tsName}}PathParameters = {
    {{#tsPathParameters}}
    /**
     * {{description}}
     *
     * {{{tsType.description}}}
     *
     * {{tsDeprecation}}
     */
    {{{tsName}}}{{tsOptional}}: {{{tsType.type}}}
    {{/tsPathParameters}}
}
{{/if}}

{{#if tsQueryParameters}}
export type {{tsName}}SearchParameters = {
    {{#tsQueryParameters}}
    /**
     * {{description}}
     *
     * {{{tsType.description}}}
     *
     * {{tsDeprecation}}
     */
    {{{tsName}}}{{tsOptional}}: {{{tsType.type}}}
    {{/tsQueryParameters}}
}
{{/if}}

{{#if tsFormParameters}}
export type {{tsName}}FormParameters = {
    {{#tsFormParameters}}
    /**
     * {{description}}
     *
     * {{{tsType.description}}}
     *
     * {{tsDeprecation}}
     */
    {{{tsName}}}{{tsOptional}}: {{{tsType.type}}}
    {{/tsFormParameters}}
}
{{/if}}

{{!-- tsBodyParameters are not currently used in the Canvas API spec --}}

type Options = {
  {{#if tsPathParameters}}
  pathParams: {{tsName}}PathParameters;
  {{/if}}
  {{#if tsQueryParameters}}
  searchParams?: {{tsName}}SearchParameters;
  {{/if}}
  {{#if tsFormParameters}}
  params?: {{tsName}}FormParameters;
  {{/if}}
}

/**
 * {{summary}}
 *
 * {{{notes}}}
 *
 * nickname: {{nickname}}
 *
 * {{tsDeprecation}}
 *
 * {{description}}
 */
export async function {{tsName}}({ 
  {{#if tsPathParameters}}
  pathParams, 
  {{/if}}
  {{#if tsQueryParameters}}
  searchParams, 
  {{/if}}
  {{#if tsFormParameters}}
  params
  {{/if}}
   }: Options) {
  return await client().fetchAs<{{{tsType.type}}}>(`{{{tsEndpoint}}}`, {
      method: "{{method}}", 
      {{#if tsPathParameters}}
      pathParams, 
      {{/if}}
      {{#if tsQueryParameters}}
      searchParams, 
      {{/if}}
      {{#if tsFormParameters}}
      params 
      {{/if}}
    });
}
