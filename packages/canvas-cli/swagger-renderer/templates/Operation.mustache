{{#tsImports}}
import { {{type}} } from '{{{packagePath}}}{{{filePath}}}';
{{/tsImports}}

type {{tsName}}PathParameters = {
    {{#tsPathParameters}}
    /**
     * {{description}}
     *
     * {{{tsType.description}}}
     *
     * {{tsDeprecation}}
     */
    {{{tsName}}}{{tsOptional}}: {{{tsType.type}}}
    {{/tsPathParameters}}
}

type {{tsName}}SearchParameters = {
    {{#tsQueryParameters}}
    /**
     * {{description}}
     *
     * {{{tsType.description}}}
     *
     * {{tsDeprecation}}
     */
    {{{tsName}}}{{tsOptional}}: {{{tsType.type}}}
    {{/tsQueryParameters}}
}

type {{tsName}}FormParameters = {
    {{#tsFormParameters}}
    /**
     * {{description}}
     *
     * {{{tsType.description}}}
     *
     * {{tsDeprecation}}
     */
    {{{tsName}}}{{tsOptional}}: {{{tsType.type}}}
    {{/tsFormParameters}}
}

type {{tsName}}BodyParameters = {
    {{#tsBodyParameters}}
    /**
     * {{description}}
     *
     * {{{tsType.description}}}
     *
     * {{tsDeprecation}}
     */
    {{{tsName}}}{{tsOptional}}: {{{tsType.type}}}
    {{/tsBodyParameters}}
}
 
type Options = {
  pathParams: {{tsName}}PathParameters
  searchParams?: {{tsName}}SearchParameters
  params?: {{tsName}}FormParameters;
}

/**
 * {{summary}}
 *
 * {{{notes}}}
 *
 * nickname: {{nickname}}
 *
 * {{tsDeprecation}}
 *
 * {{description}}
 */
export async function {{tsName}}({ 
  pathParams, 
  searchParams, 
  params
   }: Options) {
  return await client().fetchAs<{{{tsType.type}}}>(`{{{tsEndpoint}}}`, {
      method: "{{method}}", 
      pathParams, 
      searchParams, 
      params 
    });
}
