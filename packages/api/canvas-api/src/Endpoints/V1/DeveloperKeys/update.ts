import { JSONObject } from '@battis/typescript-tricks';
import { Masquerade } from '@groton/canvas-api.client.base';
import { client } from '../../../Client.js';
import { array } from '../../../Overrides.js';
import { DeveloperKey } from '../../../Resources/DeveloperKeys.js';

export type updatePathParameters = {
  /**
   * ID
   *
   * Type: string
   */
  id: string | number;
};

export type updateSearchParameters = Masquerade;

export type updateFormParameters = Masquerade & {
  /**
   * No description
   *
   * Json
   */
  developer_key: JSONObject;
  /**
   * Defaults to false. If true, access tokens generated by this key will
   * expire after 1 hour.
   *
   * Type: boolean
   */
  'developer_key[auto_expire_tokens]': boolean | string;
  /** Contact email for the key. */
  'developer_key[email]': string;
  /** URL for a small icon to display in key list. */
  'developer_key[icon_url]': string;
  /** The display name. */
  'developer_key[name]': string;
  /** User-provided notes about the key. */
  'developer_key[notes]': string;
  /** Deprecated in favor of redirect_uris. Do not use. */
  'developer_key[redirect_uri]': string;
  /** List of URLs used during OAuth2 flow to validate given redirect URI. */
  'developer_key[redirect_uris]': array;
  /** User-specified code representing the vendor that uses the key. */
  'developer_key[vendor_code]': string;
  /**
   * Defaults to true. If false, key will not be visible in the UI.
   *
   * Type: boolean
   */
  'developer_key[visible]': boolean | string;
  /**
   * Defaults to false. If true, key is only usable in non-production
   * environments (test, beta). Avoids problems with beta refresh.
   *
   * Type: boolean
   */
  'developer_key[test_cluster_only]': boolean | string;
  /**
   * Used in OAuth2 client credentials flow to specify the audience for the
   * access token.
   */
  'developer_key[client_credentials_audience]': string;
  /** List of API endpoints key is allowed to access. */
  'developer_key[scopes]': array;
  /**
   * If true, then token requests with this key must include scopes.
   *
   * Type: boolean
   */
  'developer_key[require_scopes]': boolean | string;
  /**
   * If true, allows `includes` parameters in API requests that match the
   * scopes of this key.
   *
   * Type: boolean
   */
  'developer_key[allow_includes]': boolean | string;
};

type Options = {
  pathParams: updatePathParameters;
} & (
  | {
      searchParams?: Partial<updateSearchParameters>;
      params?: Partial<updateFormParameters>;
      strict?: false;
    }
  | {
      searchParams: updateSearchParameters;
      params: updateFormParameters;
      strict: true;
    }
);

/**
 * Update a Developer Key
 *
 * Update an existing Canvas API key. Updating an LTI 1.3 registration is not
 * supported here and should be done via the LTI Registration API.
 *
 * Nickname: update_developer_key
 */
export async function update(options: Options) {
  const response = await client().fetchAs<DeveloperKey>(
    `/api/v1/developer_keys/{id}`,
    {
      method: 'PUT',
      ...options
    }
  );
  return response;
}
